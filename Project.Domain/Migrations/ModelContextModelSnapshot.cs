// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Project.Domain;
using System;

namespace Project.Domain.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011");

            modelBuilder.Entity("Project.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Contacts");

                    b.Property<string>("Info");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Project.Domain.Company_Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<Guid?>("CompanyNotificationId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyNotificationId");

                    b.ToTable("Company_Notifications");
                });

            modelBuilder.Entity("Project.Domain.CompanyNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Info");

                    b.HasKey("Id");

                    b.ToTable("CompanyNotifications");
                });

            modelBuilder.Entity("Project.Domain.CompletedTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("ReceivedPoints");

                    b.Property<string>("Solution");

                    b.Property<Guid?>("TaskId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("CompletedTasks");
                });

            modelBuilder.Entity("Project.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CompanyId");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name");

                    b.Property<int>("PeopleLimit");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Vacancy");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Project.Domain.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answers");

                    b.Property<Guid?>("CourseId");

                    b.Property<string>("Info");

                    b.Property<string>("Name");

                    b.Property<int>("Points");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Project.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Info");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project.Domain.UserAndCourses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CourseId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAndCourses");
                });

            modelBuilder.Entity("Project.Domain.UserAndNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("UserId");

                    b.Property<Guid?>("UserNotificationId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserNotificationId");

                    b.ToTable("CompanyAndNotifications");
                });

            modelBuilder.Entity("Project.Domain.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Info");

                    b.HasKey("Id");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("Project.Domain.Company_Notification", b =>
                {
                    b.HasOne("Project.Domain.Company", "Company")
                        .WithMany("Notifications")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Project.Domain.CompanyNotification", "CompanyNotification")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyNotificationId");
                });

            modelBuilder.Entity("Project.Domain.CompletedTask", b =>
                {
                    b.HasOne("Project.Domain.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("Project.Domain.User")
                        .WithMany("CompletedTasks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Project.Domain.Course", b =>
                {
                    b.HasOne("Project.Domain.Company")
                        .WithMany("Courses")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Project.Domain.Task", b =>
                {
                    b.HasOne("Project.Domain.Course", "Course")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("Project.Domain.UserAndCourses", b =>
                {
                    b.HasOne("Project.Domain.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId");

                    b.HasOne("Project.Domain.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Project.Domain.UserAndNotification", b =>
                {
                    b.HasOne("Project.Domain.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.HasOne("Project.Domain.UserNotification", "UserNotification")
                        .WithMany("Users")
                        .HasForeignKey("UserNotificationId");
                });
#pragma warning restore 612, 618
        }
    }
}
